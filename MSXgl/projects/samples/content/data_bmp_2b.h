// ██▀▀█▀▀██▀▀▀▀▀▀▀█▀▀█ ▄
// ██  ▀  █▄  ▀██▄ ▀ ▄█ ▄  ▄█▄█ ▄▀██
// █  █ █  ▀▀  ▄█  █  █ ██ ██ █  ▀██
// ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀          ▀▀
// Data generated using MSXimg 1.16.6 on Mon Jul 24 23:08:32 2023
// by Guillaume "Aoineko" Blanchard (2022) under CC BY-SA free license
// ─────────────────────────────────────────────────────────────────────────────
// Source image author: GrafxKid (https://opengameart.org/content/super-random-sprites)
// License: CC-BY
// ─────────────────────────────────────────────────────────────────────────────
// Generation parameters:
//  - Input file:     img\data.png
//  - Mode:           Bitmap
//  - Start position: 16, 16
//  - Sprite size:    16, 16 (gap: 0, 0)
//  - Sprite count:   6, 1
//  - Color count:    4 (Transparent: #FF00FF)
//  - Compressor:     None
//  - Skip empty:     FALSE

// Data table
const unsigned char g_DataBmp2b[] =
{
// Sprite[0] (offset:0)
	0x01, 0x15, 0x54, 0x00, 
	0x05, 0x55, 0x55, 0x40, 
	0x01, 0x55, 0x55, 0x40, 
	0x05, 0x6F, 0x9B, 0x90, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7F, 0xAB, 0xD0, 
	0x05, 0x6F, 0xAF, 0x90, 
	0x01, 0x56, 0xFE, 0x40, 
	0x15, 0x9B, 0xFF, 0x94, 
	0x6B, 0x9F, 0xFF, 0xD9, 
	0x6E, 0x9B, 0xFF, 0x99, 
	0x55, 0x5A, 0xAE, 0x95, 
	0x05, 0x5A, 0xA5, 0x50, 
	0x00, 0x6A, 0x99, 0x00, 
	0x00, 0x15, 0x6A, 0x40, 
// Sprite[1] (offset:64)
	0x00, 0x00, 0x00, 0x00, 
	0x01, 0x15, 0x54, 0x00, 
	0x05, 0x55, 0x55, 0x40, 
	0x01, 0x55, 0x55, 0x40, 
	0x05, 0x6F, 0x9B, 0x90, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7F, 0xAB, 0xD0, 
	0x05, 0x6F, 0xAF, 0x90, 
	0x15, 0x56, 0xFE, 0x54, 
	0x6B, 0x9B, 0xFF, 0x99, 
	0x6E, 0x9F, 0xFF, 0xD9, 
	0x55, 0x5B, 0xFF, 0x95, 
	0x05, 0x5A, 0xFE, 0x90, 
	0x00, 0x55, 0x55, 0x40, 
	0x00, 0x1A, 0xA9, 0x00, 
// Sprite[2] (offset:128)
	0x00, 0x00, 0x00, 0x00, 
	0x01, 0x15, 0x54, 0x00, 
	0x05, 0x55, 0x55, 0x40, 
	0x01, 0x55, 0x55, 0x40, 
	0x05, 0x6F, 0x9B, 0x90, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7F, 0xAB, 0xD0, 
	0x05, 0x6F, 0xAF, 0x90, 
	0x01, 0x56, 0xFE, 0x40, 
	0x15, 0x9B, 0xFF, 0x94, 
	0x6B, 0x9F, 0xFF, 0xD9, 
	0x6E, 0x9B, 0xFF, 0x99, 
	0x55, 0x5A, 0xFE, 0x95, 
	0x05, 0x55, 0x6A, 0x50, 
	0x01, 0xAA, 0x95, 0x00, 
// Sprite[3] (offset:192)
	0x01, 0x15, 0x54, 0x00, 
	0x05, 0x55, 0x55, 0x40, 
	0x01, 0x55, 0x55, 0x40, 
	0x05, 0x6F, 0x9B, 0x90, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7F, 0xAB, 0xD0, 
	0x05, 0x6F, 0xAF, 0x90, 
	0x01, 0x56, 0xFE, 0x40, 
	0x15, 0x9B, 0xFF, 0x94, 
	0x6B, 0x9F, 0xFF, 0xD9, 
	0x6E, 0x9B, 0xFF, 0x99, 
	0x55, 0x5A, 0xFE, 0xA5, 
	0x05, 0x55, 0x5A, 0xA4, 
	0x01, 0xA9, 0x6A, 0x90, 
	0x01, 0xAA, 0x55, 0x40, 
// Sprite[4] (offset:256)
	0x00, 0x00, 0x00, 0x00, 
	0x01, 0x15, 0x54, 0x00, 
	0x05, 0x55, 0x55, 0x40, 
	0x01, 0x55, 0x55, 0x40, 
	0x05, 0x6F, 0x9B, 0x90, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7F, 0xAB, 0xD0, 
	0x05, 0x6F, 0xAF, 0x90, 
	0x15, 0x56, 0xFE, 0x54, 
	0x6B, 0x9B, 0xFF, 0x99, 
	0x6E, 0x9F, 0xFF, 0xD9, 
	0x55, 0x5B, 0xFF, 0x95, 
	0x05, 0x5A, 0xFE, 0x90, 
	0x01, 0x55, 0x55, 0x50, 
	0x01, 0xAA, 0x6A, 0xA4, 
// Sprite[5] (offset:320)
	0x00, 0x00, 0x00, 0x00, 
	0x01, 0x15, 0x54, 0x00, 
	0x05, 0x55, 0x55, 0x40, 
	0x01, 0x55, 0x55, 0x40, 
	0x05, 0x6F, 0x9B, 0x90, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7D, 0xFD, 0xD0, 
	0x05, 0x7F, 0xAB, 0xD0, 
	0x05, 0x6F, 0xAF, 0x90, 
	0x01, 0x56, 0xFE, 0x40, 
	0x15, 0x9B, 0xFF, 0x94, 
	0x6B, 0x9F, 0xFF, 0xD9, 
	0x6E, 0x9B, 0xFF, 0x99, 
	0x55, 0x5A, 0xFE, 0x95, 
	0x05, 0xAA, 0x95, 0x50, 
	0x00, 0x55, 0x6A, 0x40, 
};
// Total size :  384 bytes

// Custom palette | Format: [x|R:3|x|B:3] [x:5|G:3] (v9938)
const unsigned char g_DataBmp2b_palette[] =
{
	0x00, 0x00, // [ 1] #0A030A
	0x45, 0x04, // [ 2] #9699A9
	0x77, 0x07, // [ 3] #FCF8F9
};
